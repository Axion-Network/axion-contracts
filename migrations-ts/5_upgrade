import dotenv from 'dotenv';
dotenv.config();
import {
  deployProxy,
  admin,
  prepareUpgrade,
  upgradeProxy,
} from '@openzeppelin/truffle-upgrades';
import {
  AuctionInstance,
  BPDInstance,
  ForeignSwapInstance,
  NativeSwapInstance,
  StakingInstance,
  SubBalancesInstance,
  TokenInstance,
} from '../types/truffle-contracts';
import fs from 'fs';
import path from 'path';
import { TEST_NETWORKS } from './utils/get_deployed_contracts';

const Auction = artifacts.require('Auction') as any;
const BPD = artifacts.require('BPD');
const ForeignSwap = artifacts.require('ForeignSwap');
const NativeSwap = artifacts.require('NativeSwap');
const Staking = artifacts.require('Staking') as any;
const SubBalances = artifacts.require('SubBalances');
const Token = artifacts.require('Token');

const TokenName = 'PB&J-V2';
const TokenSymbol = 'PBJ-V2';

module.exports = async function (
  deployer,
  network,
  [setterAddress, managerAddress]
) {
  if (!process.argv.includes('migrate')) {
    return;
  }

  try {
    console.log('DEPLOYING CONTRACTS');
    console.log(`Running on network: ${network}`);
    const {
      DEPLOYER_ADDRESS,
      MANAGER_ADDRESS,
      SWAP_TOKEN_ADDRESS,
    } = process.env;

    if (!TEST_NETWORKS.includes(network)) {
      [DEPLOYER_ADDRESS].forEach((value) => {
        if (!value) {
          throw new Error('Please set the value in .env file');
        }
      });
    }

    const setter = DEPLOYER_ADDRESS ?? setterAddress;
    const manager = MANAGER_ADDRESS ?? managerAddress;

    // const deployedStaking = await Staking.deployed();
    // console.log(deployedStaking.address);
    const instance = await upgradeProxy(
      '0xBE48Ffc6f798617A1ed70a698ad5d03C95E06e90',
      Auction,
      {
        unsafeAllowCustomTypes: true,
        unsafeAllowLinkedLibraries: true,
      }
    );

    console.log(instance);

    // Staking
    // const staking = (await deployProxy(Staking as any, [manager, setter], {
    //   unsafeAllowCustomTypes: true,
    //   unsafeAllowLinkedLibraries: true,
    // }).then((instance) => {
    //   console.log('Deployed: Staking', instance.address);
    //   return instance;
    // })) as StakingInstance;

    console.log(
      '============================DEPLOYING CONTRACTS: DONE==============================='
    );
  } catch (err) {
    console.error(err);
    console.error(
      '============================DEPLOYING CONTRACTS: FAILED==============================='
    );

    process.exit();
  }
} as Truffle.Migration;

// because of https://stackoverflow.com/questions/40900791/cannot-redeclare-block-scoped-variable-in-unrelated-files
export {};
